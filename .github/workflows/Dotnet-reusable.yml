name: Reusable Dotnet Workflow

on:
  workflow_call:
    inputs:
      command:
        required: true
        type: string
      projects:
        required: true
        type: string
      arguments:
        required: false
        type: string
      restoreArguments:
        required: false
        type: string
      publishTestResults:
        required: false
        type: boolean
      testRunTitle:
        required: false
        type: string
      publishWebProjects:
        required: false
        type: boolean
      zipAfterPublish:
        required: false
        type: boolean
      modifyOutputPath:
        required: false
        type: boolean
      packagesToPack:
        required: false
        type: string
      configuration:
        required: false
        type: string
      packDirectory:
        required: false
        type: string
      nobuild:
        required: false
        type: boolean
      includesymbols:
        required: false
        type: boolean
      includesource:
        required: false
        type: boolean
      requestTimeout:
        required: false
        type: string
      includeNuGetOrg:
        required: false
        type: boolean
      nugetConfigPath:
        required: false
        type: string
      noCache:
        required: false
        type: boolean
      restoreDirectory:
        required: false
        type: string
      verbosityRestore:
        required: false
        type: string
      publishPackageMetadata:
        required: false
        type: boolean
      versioningScheme:
        required: false
        type: string
      versionEnvVar:
        required: false
        type: string
      majorVersion:
        required: false
        type: string
      minorVersion:
        required: false
        type: string
      patchVersion:
        required: false
        type: string
      buildProperties:
        required: false
        type: string
      verbosityPack:
        required: false
        type: string
      workingDirectory:
        required: false
        type: string

jobs:
  dotnet:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ${{ inputs.workingDirectory }}

    env:
      VERSION: ${{ inputs.majorVersion }}.${{ inputs.minorVersion }}.${{ inputs.patchVersion }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.201'

      - name: Set version env var (optional use)
        shell: bash
        run: echo "${{ inputs.versionEnvVar }}=$VERSION" >> $GITHUB_ENV

      - name: Run dotnet ${{ inputs.command }}
        shell: bash
        run: |
          if [[ "${{ inputs.command }}" == "restore" ]]; then
            dotnet restore "${{ inputs.projects }}" 
              --configfile "${{ inputs.nugetConfigPath }}" 
              ${{ inputs.restoreArguments }} 
              --no-cache="${{ inputs.noCache }}" 
              --packages "${{ inputs.restoreDirectory }}" 
              --verbosity "${{ inputs.verbosityRestore }}"

          elif [[ "${{ inputs.command }}" == "build" ]]; then
            dotnet build "${{ inputs.projects }}" ${{ inputs.arguments }}

          elif [[ "${{ inputs.command }}" == "test" ]]; then
            dotnet test "${{ inputs.projects }}" ${{ inputs.arguments }} 
              --logger "trx;LogFileName=${{ inputs.testRunTitle }}.trx"
            if [[ "${{ inputs.publishTestResults }}" == "true" ]]; then
              echo "Publishing test results..."
            fi

          elif [[ "${{ inputs.command }}" == "pack" ]]; then
            dotnet pack "${{ inputs.packagesToPack }}" 
              --configuration "${{ inputs.configuration }}" 
              --output "${{ inputs.packDirectory }}" 
              --no-build="${{ inputs.nobuild }}" 
              --include-symbols="${{ inputs.includesymbols }}" 
              --include-source="${{ inputs.includesource }}" 
              --property "Version=$VERSION;${{ inputs.buildProperties }}" 
              --verbosity "${{ inputs.verbosityPack }}"

          elif [[ "${{ inputs.command }}" == "publish" ]]; then
            dotnet publish "${{ inputs.projects }}" 
              --configuration "${{ inputs.configuration }}" 
              --output "${{ inputs.packDirectory }}" 
              --no-build="${{ inputs.nobuild }}" 
              --verbosity "${{ inputs.verbosityPack }}"
            if [[ "${{ inputs.publishWebProjects }}" == "true" ]]; then
              echo "Publishing web projects..."
            fi
            if [[ "${{ inputs.zipAfterPublish }}" == "true" ]]; then
              echo "Zipping published output..."
            fi
          fi
